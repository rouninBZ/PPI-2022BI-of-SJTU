#define _CRT_SECURE_NO_WARNINGS 1
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
# define inf 9999
float minPath;
int hope,num;
int Visited[10000];
int answer[10000];
int  answercpy[10000];
//DFS算法核心递归函数
void dfs(int cur, float dst, int final,float matrix[21][21]){
	int n = num;
	if (minPath < dst) return;
	if (cur == final){
		int j;
		if (minPath > dst){
			minPath = dst;
			for (j = 0; j < num; j++){
				answercpy[j] = answer[j];
			}
		}
		return;
	}
	else{
		int i;
		for (i = 0; i < num; i++){
			if (matrix[cur][i] != inf&& Visited[i] == 0){
				Visited[i] = 1;
				answer[hope] = i;
				hope++;
				dfs(i, dst + matrix[cur][i], final,matrix);
				Visited[i] = 0;
				hope--;
				answer[hope] = -1;
			}
		}
		return;
	}
}
//DFS算法函数，输入起始protein序号，终止protein序号，蛋白质数量，邻接矩阵，蛋白序列，输出最短路径及其长度
float DFS(int start, int des,int npro,float matrix[21][21],char prodic[200][5]，char* name){
	int i;
	num = npro;
	memset(answercpy, -1, sizeof(int)*num);
	memset(answer, -1, sizeof(int)*num);
	minPath = 999999;
	hope = 1;
	answer[0] = start;
	dfs(start, 0, des,matrix);
	FILE* fp = fopen(name, "w");
	fprintf(fp,"the ID path is:");
	for (i = 0; i < num; i++){
		if (answercpy[i] != -1){
			fprintf(fp,"%d->", answercpy[i]);
		}
	}
	fprintf(fp,"end\n");
	fprintf(fp,"minPath=%f\n", minPath);
	fclose(fp);
	return minPath;
}
